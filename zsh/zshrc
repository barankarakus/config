# Load utility functions/items for use when configuring zsh; these start with U_
# ---------------------------------------------------------------------------
source $CONFIGDIR/zsh/utils/utils.sh

# Path to ripgrep config file
# ---------------------------------------------------------------------------
export RIPGREP_CONFIG_PATH=$CONFIGDIR/rg/ripgreprc

# Using `uname` to distinguish between MacOS and Linux systems and load appropriate
# OS-specific configuration files
# ---------------------------------------------------------------------------
failure_msg="Could not detect operating system: Can't configure zsh properly\n"
if ! U_command_exists uname; then
    # Can't find `uname` utility
    printf $failure_msg
else
    system=$(uname -s)
    if [ $system = "Darwin" ]; then
        U_source_if_exists $CONFIGDIR/zsh/os_specific/maczshrc.sh
    elif [ $system = "Linux" ]; then
        U_source_if_exists $CONFIGDIR/zsh/os_specific/linuxzshrc.sh
    else
        printf $failure_msg
    fi
    unset system
fi
unset failure_msg

# Modifying (GNU) ls
# ---------------------------------------------------------------------------
# Alias ls so that -F, -h, --color flags are always passed (see man ls for details)
# -F ensures directories are suffixed with /, executables with *, symlinks @
# -h ensures sizes of files are in human-readable form
# --color ensures output is colored. See man ls for details.
alias ls='ls -Fh --color'

# This is here thanks to the powerlevel10k plug-in
# ---------------------------------------------------------------------------
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# zplug stuff (plug-in manager for zsh)
# ---------------------------------------------------------------------------
source $CONFIGDIR/zsh/zshplugins.sh

# ---------------------------------------------------------------------------

# Load the powerlevel10k configuration file specifying how the prompt
# should look: more details above.
# ---------------------------------------------------------------------------
source $CONFIGDIR/zsh/.p10k.zsh

# Source zsh keybindings configuration file
# ---------------------------------------------------------------------------
source $CONFIGDIR/zsh/keys/keys.sh

# Load fzf (command-line fuzzy-finder)
# ---------------------------------------------------------------------------
source $CONFIGDIR/zsh/fzf/fzf_load.zsh
source $CONFIGDIR/zsh/fzf/fzf_config.sh


# Recent directory management/navigation
# ---------------------------------------------------------------------------
# cd to a directory just by typing its name; no 'cd' needed
# if what you type is a command name, it'll be treated as a command instead
setopt autocd
# zsh has a 'directory stack'; by default, 'cd' does not add to this stack
# this option makes cd push to the directory stack
setopt autopushd
# don't push multiple copies of the same directory onto the stack
setopt pushdignoredups
# keep the directory stack from getting too large
DIRSTACKSIZE=10
## this caches the directory stack so it persists over multiple sessions
## the chpwd function is a post-cd HOOK: it's called immediately after every
## time we cd; it's how we keep this directory stack cache file updated
#DIRSTACKFILE=$CONFIGDIR/zsh/.zdirs
#if [[ -f $DIRSTACKFILE ]] # && [[ $#dirstack -eq 0 ]];
#then
  #echo $dirstack
  #dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  #echo $dirstack
  #echo $dirstack[1]
  #[[ -d $dirstack[1] ]] && cd $dirstack[1] && cd $OLDPWD
  #echo $dirstack
#fi
#chpwd() {
  #print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
  #dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
#}
# view directory history (stack) quickly
# can then use cd -<number> to move to the desired directory
# alternatively, write cd -, then press <Tab> to do this quicker
alias dh="dirs -v"  # directory history

# Some environment configuration
# ---------------------------------------------------------------------------
export EDITOR="nvim"

# Some aliases
# ---------------------------------------------------------------------------
alias v="$EDITOR"

alias evrc="$EDITOR $CONFIGDIR/vim/vimrc"  # edit vimrc

alias ezrc="$EDITOR $CONFIGDIR/zsh/zshrc"  # edit zshrc
alias elzrc="$EDITOR $CONFIGDIR/zsh/localzshrc.sh"  # edit local zshrc
alias szrc="source $CONFIGDIR/zsh/zshrc"  # source zshrc

alias g="git"
alias gs="git status"
alias gss="git status -s"
alias gcmt="git commit"
alias gadd="git add"

alias la="ls -a"   # list all
alias ll="ls -al"  #list long

alias wcl='wc -l'  # count lines

# Setting up zsh to invoke Vim's built-in manpager for viewing man pages
# Two benefits:
# ---------------------------------------------------------------------------
# 1) man pages are syntax highlighted - as if they needed to be more fun to
# read :)
# 2) man pages are opened up in Vim - so all my keybindings apply

# export MANPAGER="vim -M +MANPAGER --not-a-term -"
export MANPAGER="nvim -c 'set ft=man' -"

# Source local zshrc file
# ---------------------------------------------------------------------------
U_source_if_exists $CONFIGDIR/zsh/localzshrc.sh

# Unset util items
# ---------------------------------------------------------------------------
source $CONFIGDIR/zsh/utils/unset_utils.sh
